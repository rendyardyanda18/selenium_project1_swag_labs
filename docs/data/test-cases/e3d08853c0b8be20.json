{"uid":"e3d08853c0b8be20","name":"test_login_neg_06","fullName":"tests.test_login#test_login_neg_06","historyId":"d87fde876ea5b8a768a937b115a2b787","time":{"start":1759737976281,"stop":1759737994020,"duration":17739},"description":"\nTC_ID: LOGIN_NEG_06\nTitle: Login with username input only\nExpected:\n    - Error message appears\n    - Showed message \"Please enter your password.\"\n","descriptionHtml":"<p>TC_ID: LOGIN_NEG_06<br />\nTitle: Login with username input only<br />\nExpected:<br />\n- Error message appears<br />\n- Showed message &quot;Please enter your password.&quot;</p>\n","status":"failed","statusMessage":"AssertionError: Error password null not found","statusTrace":">       lambda: l.error_message(),\n                ^^^^^^^^^^^^^^^^^\n        step_name=\"Error password null\"\n    )\n\ntests\\test_login.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\login_page.py:20: in error_message\n    return self.browser.find_element(*LoginLocators.ERROR_MSG)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.project2venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:926: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.project2venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001705FBACA50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...ff77dc2f048+11176]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffab6f57374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffab70fcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"h3[data-test='error']\"}\nE         (Session info: chrome=141.0.7390.55); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#nosuchelementexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff77dc3fc95+79861]\nE       \tGetHandleVerifier [0x0x7ff77dc3fcf0+79952]\nE       \t(No symbol) [0x0x7ff77d9bcada]\nE       \t(No symbol) [0x0x7ff77da14457]\nE       \t(No symbol) [0x0x7ff77da1471c]\nE       \t(No symbol) [0x0x7ff77da68217]\nE       \t(No symbol) [0x0x7ff77da3cb1f]\nE       \t(No symbol) [0x0x7ff77da64f8b]\nE       \t(No symbol) [0x0x7ff77da3c8b3]\nE       \t(No symbol) [0x0x7ff77da05272]\nE       \t(No symbol) [0x0x7ff77da06043]\nE       \tGetHandleVerifier [0x0x7ff77defb9cd+2946349]\nE       \tGetHandleVerifier [0x0x7ff77def5c4a+2922410]\nE       \tGetHandleVerifier [0x0x7ff77df159d7+3052855]\nE       \tGetHandleVerifier [0x0x7ff77dc5aa7e+189918]\nE       \tGetHandleVerifier [0x0x7ff77dc62a1f+222591]\nE       \tGetHandleVerifier [0x0x7ff77dc48ab4+116244]\nE       \tGetHandleVerifier [0x0x7ff77dc48c69+116681]\nE       \tGetHandleVerifier [0x0x7ff77dc2f048+11176]\nE       \tBaseThreadInitThunk [0x0x7ffab6f57374+20]\nE       \tRtlUserThreadStart [0x0x7ffab70fcc91+33]\n\n.project2venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nbrowser_chrome = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7856112582767bf3b09412e411a23a3a\")>\nrun_timestamp = '2025-10-06_15-05-41'\n\n    def test_login_neg_06(browser_chrome,run_timestamp):\n        \"\"\"\n        TC_ID: LOGIN_NEG_06\n        Title: Login with username input only\n        Expected:\n            - Error message appears\n            - Showed message \"Please enter your password.\"\n        \"\"\"\n        l = LoginPage(browser_chrome)\n        l.open()\n        l.login_input(Config.STANDARD_USER,Config.PASSWORD)\n        take_screenshot(browser_chrome, step_name=\"input_neg06\", run_timestamp=run_timestamp)\n        l.login_button()\n        # validasi element tampil\n>       asserts.assert_element_displayed(\n            lambda: l.error_message(),\n            step_name=\"Error password null\"\n        )\n\ntests\\test_login.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nelement_callable = <function test_login_neg_06.<locals>.<lambda> at 0x000001705FB8C9A0>\nstep_name = 'Error password null'\n\n    @staticmethod\n    def assert_element_displayed(element_callable, step_name=\"Element\"):\n        \"\"\"\n        Verifikasi element ditampilkan di halaman, handle 3 kemungkinan:\n        1. Element ada dan tampil → pass\n        2. Element ada tapi hidden → fail\n        3. Element tidak ada → fail\n        element_callable : function/lambda yang mengembalikan element\n        \"\"\"\n        try:\n            elem = element_callable()  # panggil fungsi untuk ambil element\n            if elem.is_displayed():\n                print(f\"\\n✅ {step_name} appeared\")\n            else:\n                print(f\"\\n❌ {step_name} found but hidden\")\n                assert False, f\"{step_name} found but hidden\"\n        except NoSuchElementException:\n            print(f\"\\n❌ {step_name} not found\")\n>           assert False, f\"{step_name} not found\"\n                   ^^^^^\nE           AssertionError: Error password null not found\n\nutils\\assertions.py:54: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser_chrome","time":{"start":1759737973784,"stop":1759737976280,"duration":2496},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"run_timestamp","time":{"start":1759737976280,"stop":1759737976281,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"description":"\nTC_ID: LOGIN_NEG_06\nTitle: Login with username input only\nExpected:\n    - Error message appears\n    - Showed message \"Please enter your password.\"\n","status":"failed","statusMessage":"AssertionError: Error password null not found","statusTrace":">       lambda: l.error_message(),\n                ^^^^^^^^^^^^^^^^^\n        step_name=\"Error password null\"\n    )\n\ntests\\test_login.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\login_page.py:20: in error_message\n    return self.browser.find_element(*LoginLocators.ERROR_MSG)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.project2venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:926: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.project2venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001705FBACA50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...ff77dc2f048+11176]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffab6f57374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffab70fcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"h3[data-test='error']\"}\nE         (Session info: chrome=141.0.7390.55); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#nosuchelementexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff77dc3fc95+79861]\nE       \tGetHandleVerifier [0x0x7ff77dc3fcf0+79952]\nE       \t(No symbol) [0x0x7ff77d9bcada]\nE       \t(No symbol) [0x0x7ff77da14457]\nE       \t(No symbol) [0x0x7ff77da1471c]\nE       \t(No symbol) [0x0x7ff77da68217]\nE       \t(No symbol) [0x0x7ff77da3cb1f]\nE       \t(No symbol) [0x0x7ff77da64f8b]\nE       \t(No symbol) [0x0x7ff77da3c8b3]\nE       \t(No symbol) [0x0x7ff77da05272]\nE       \t(No symbol) [0x0x7ff77da06043]\nE       \tGetHandleVerifier [0x0x7ff77defb9cd+2946349]\nE       \tGetHandleVerifier [0x0x7ff77def5c4a+2922410]\nE       \tGetHandleVerifier [0x0x7ff77df159d7+3052855]\nE       \tGetHandleVerifier [0x0x7ff77dc5aa7e+189918]\nE       \tGetHandleVerifier [0x0x7ff77dc62a1f+222591]\nE       \tGetHandleVerifier [0x0x7ff77dc48ab4+116244]\nE       \tGetHandleVerifier [0x0x7ff77dc48c69+116681]\nE       \tGetHandleVerifier [0x0x7ff77dc2f048+11176]\nE       \tBaseThreadInitThunk [0x0x7ffab6f57374+20]\nE       \tRtlUserThreadStart [0x0x7ffab70fcc91+33]\n\n.project2venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nbrowser_chrome = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7856112582767bf3b09412e411a23a3a\")>\nrun_timestamp = '2025-10-06_15-05-41'\n\n    def test_login_neg_06(browser_chrome,run_timestamp):\n        \"\"\"\n        TC_ID: LOGIN_NEG_06\n        Title: Login with username input only\n        Expected:\n            - Error message appears\n            - Showed message \"Please enter your password.\"\n        \"\"\"\n        l = LoginPage(browser_chrome)\n        l.open()\n        l.login_input(Config.STANDARD_USER,Config.PASSWORD)\n        take_screenshot(browser_chrome, step_name=\"input_neg06\", run_timestamp=run_timestamp)\n        l.login_button()\n        # validasi element tampil\n>       asserts.assert_element_displayed(\n            lambda: l.error_message(),\n            step_name=\"Error password null\"\n        )\n\ntests\\test_login.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nelement_callable = <function test_login_neg_06.<locals>.<lambda> at 0x000001705FB8C9A0>\nstep_name = 'Error password null'\n\n    @staticmethod\n    def assert_element_displayed(element_callable, step_name=\"Element\"):\n        \"\"\"\n        Verifikasi element ditampilkan di halaman, handle 3 kemungkinan:\n        1. Element ada dan tampil → pass\n        2. Element ada tapi hidden → fail\n        3. Element tidak ada → fail\n        element_callable : function/lambda yang mengembalikan element\n        \"\"\"\n        try:\n            elem = element_callable()  # panggil fungsi untuk ambil element\n            if elem.is_displayed():\n                print(f\"\\n✅ {step_name} appeared\")\n            else:\n                print(f\"\\n❌ {step_name} found but hidden\")\n                assert False, f\"{step_name} found but hidden\"\n        except NoSuchElementException:\n            print(f\"\\n❌ {step_name} not found\")\n>           assert False, f\"{step_name} not found\"\n                   ^^^^^\nE           AssertionError: Error password null not found\n\nutils\\assertions.py:54: AssertionError","steps":[],"attachments":[{"uid":"8c32e5679f90b81","name":"screenshot_input_neg06","source":"8c32e5679f90b81.png","type":"image/png","size":26979}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"browser_chrome::0","time":{"start":1759737994249,"stop":1759738000436,"duration":6187},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login"},{"name":"host","value":"DESKTOP-N1PMKPL"},{"name":"thread","value":"10040-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"e3d08853c0b8be20.json","parameterValues":[]}