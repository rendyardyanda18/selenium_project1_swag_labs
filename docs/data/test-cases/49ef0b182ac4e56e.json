{"uid":"49ef0b182ac4e56e","name":"test_login_pos_01","fullName":"tests.test_login#test_login_pos_01","historyId":"f7dd2152c6cfa5665aa1b92919645c42","time":{"start":1759726499192,"stop":1759726501313,"duration":2121},"description":"\nTC_ID: LOGIN_POS_01\nTitle: Login with valid user\nExpected: Redirected to inventory page\n","descriptionHtml":"<p>TC_ID: LOGIN_POS_01<br />\nTitle: Login with valid user<br />\nExpected: Redirected to inventory page</p>\n","status":"failed","statusMessage":"AssertionError: Expected URL to contain 'salah', but got 'https://www.saucedemo.com/inventory.html'","statusTrace":"browser_chrome = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2d03d4064469a094b0a79c17d1b3abb1\")>\nrun_timestamp = '2025-10-06_11-54-57'\n\n    def test_login_pos_01(browser_chrome,run_timestamp):\n        \"\"\"\n        TC_ID: LOGIN_POS_01\n        Title: Login with valid user\n        Expected: Redirected to inventory page\n        \"\"\"\n        login = LoginPage(browser_chrome)\n        login.open()\n        login.login(Config.STANDARD_USER, Config.PASSWORD)\n        take_screenshot(browser_chrome, step_name=\"input_pos01\",run_timestamp=run_timestamp)\n        # validasi dengan assert import dari module assertion + take screeshot dari utils.helpers\n        try:\n            url_contains(browser_chrome, \"salah\")\n            take_screenshot(browser_chrome, step_name=\"result_pos01_as expected\",run_timestamp=run_timestamp)\n        except AssertionError as e:\n            take_screenshot(browser_chrome, step_name=\"result_pos01_unexpected\",run_timestamp=run_timestamp)\n>           raise e\n\ntests\\test_login.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_login.py:20: in test_login_pos_01\n    url_contains(browser_chrome, \"salah\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2d03d4064469a094b0a79c17d1b3abb1\")>\nkeyword = 'salah'\n\n    def assert_url_contains(driver, keyword):\n        # verifikasi URL saat ini mengandung kata tertentu\n        actual_result = driver.current_url\n        expected_result = keyword\n        # tambahan if untuk menampilkan pesan jika true\n        if expected_result in actual_result:\n            print(f\"\\n {expected_result} was found in {actual_result}\")\n        # assert memvalidasi kebenaran dan menghentikan eksekusi jika salah\n>       assert expected_result in actual_result, f\"Expected URL to contain '{expected_result}', but got '{actual_result}'\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Expected URL to contain 'salah', but got 'https://www.saucedemo.com/inventory.html'\n\nutils\\assertions.py:9: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser_chrome","time":{"start":1759726497621,"stop":1759726499191,"duration":1570},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"stepsCount":0,"shouldDisplayMessage":false},{"name":"run_timestamp","time":{"start":1759726499191,"stop":1759726499191,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"stepsCount":0,"shouldDisplayMessage":false}],"testStage":{"description":"\nTC_ID: LOGIN_POS_01\nTitle: Login with valid user\nExpected: Redirected to inventory page\n","status":"failed","statusMessage":"AssertionError: Expected URL to contain 'salah', but got 'https://www.saucedemo.com/inventory.html'","statusTrace":"browser_chrome = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2d03d4064469a094b0a79c17d1b3abb1\")>\nrun_timestamp = '2025-10-06_11-54-57'\n\n    def test_login_pos_01(browser_chrome,run_timestamp):\n        \"\"\"\n        TC_ID: LOGIN_POS_01\n        Title: Login with valid user\n        Expected: Redirected to inventory page\n        \"\"\"\n        login = LoginPage(browser_chrome)\n        login.open()\n        login.login(Config.STANDARD_USER, Config.PASSWORD)\n        take_screenshot(browser_chrome, step_name=\"input_pos01\",run_timestamp=run_timestamp)\n        # validasi dengan assert import dari module assertion + take screeshot dari utils.helpers\n        try:\n            url_contains(browser_chrome, \"salah\")\n            take_screenshot(browser_chrome, step_name=\"result_pos01_as expected\",run_timestamp=run_timestamp)\n        except AssertionError as e:\n            take_screenshot(browser_chrome, step_name=\"result_pos01_unexpected\",run_timestamp=run_timestamp)\n>           raise e\n\ntests\\test_login.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_login.py:20: in test_login_pos_01\n    url_contains(browser_chrome, \"salah\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2d03d4064469a094b0a79c17d1b3abb1\")>\nkeyword = 'salah'\n\n    def assert_url_contains(driver, keyword):\n        # verifikasi URL saat ini mengandung kata tertentu\n        actual_result = driver.current_url\n        expected_result = keyword\n        # tambahan if untuk menampilkan pesan jika true\n        if expected_result in actual_result:\n            print(f\"\\n {expected_result} was found in {actual_result}\")\n        # assert memvalidasi kebenaran dan menghentikan eksekusi jika salah\n>       assert expected_result in actual_result, f\"Expected URL to contain '{expected_result}', but got '{actual_result}'\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Expected URL to contain 'salah', but got 'https://www.saucedemo.com/inventory.html'\n\nutils\\assertions.py:9: AssertionError","steps":[],"attachments":[{"uid":"64db479ac7c754a3","name":"screenshot_input_pos01","source":"64db479ac7c754a3.png","type":"image/png","size":66617},{"uid":"d9878f00a3220913","name":"screenshot_result_pos01_unexpected","source":"d9878f00a3220913.png","type":"image/png","size":127867}],"parameters":[],"hasContent":true,"attachmentStep":false,"attachmentsCount":2,"stepsCount":0,"shouldDisplayMessage":true},"afterStages":[{"name":"browser_chrome::0","time":{"start":1759726501479,"stop":1759726505652,"duration":4173},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"stepsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login"},{"name":"host","value":"DESKTOP-N1PMKPL"},{"name":"thread","value":"22960-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"49ef0b182ac4e56e.json","parameterValues":[]}